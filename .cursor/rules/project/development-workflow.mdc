---
description: Development workflow for a Next.js project.
globs:
alwaysApply: true
---

# Development Workflow

## Environment Setup

- Node.js 18+ required
- pnpm package manager
- Supabase project configured
- Environment variables set up properly

## Before Starting

1. Ensure all dependencies are installed: `pnpm install`
2. Set up environment variables
3. Start the development server: `pnpm dev`

## During Development

1. Follow TypeScript strict mode
2. Use proper ESLint and Prettier configuration
3. Test changes in multiple browsers
4. Check for accessibility issues
5. Verify internationalization works

## Before Committing

1. Run type checking: `pnpm type-check`
2. Run linting: `pnpm lint`
3. Ensure all tests pass
4. Check bundle size impact
5. Verify responsive design

## Best Practices

### Code Quality

- Run ESLint and Prettier before committing
- Use Husky pre-commit hooks for automated checks
- Follow the established linting rules
- Write meaningful commit messages

### Performance

- Use Next.js Image component for optimized images
- Implement proper code splitting with dynamic imports
- Use React.memo for expensive components when needed
- Optimize bundle size with proper tree shaking

### Security

- Never expose sensitive data in client-side code
- Use proper authentication with Supabase Auth
- Validate all user inputs with Zod
- Follow OWASP security guidelines

### State Management

- Use React Query for server state
- Use React state for local component state
- Use React Context sparingly and only for truly global state
- Prefer composition over prop drilling

### Error Handling

- Implement proper error boundaries
- Use try-catch blocks for async operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging

### Accessibility

- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation works
- Test with screen readers
- Use proper color contrast ratios

### SEO

- Use Next.js metadata API
- Implement proper meta tags
- Use semantic HTML structure
- Optimize for Core Web Vitals

### API & Data Fetching

- Use TanStack React Query for server state management
- Implement proper error handling and loading states
- Use Supabase client for database operations
- Follow RESTful API conventions for custom endpoints

### Forms & Validation

- Use React Hook Form for form management
- Implement Zod schemas for validation
- Provide proper error messages and accessibility
- Use proper form submission patterns

### Internationalization

- Use i18next for all user-facing text
- Support multiple languages (en, de, uk)
- Use translation keys in the format: `namespace:key`
- Implement proper language detection and switching

## Development Tools

### Available Scripts

- `pnpm dev`: Start development server with Turbopack
- `pnpm build`: Build for production
- `pnpm start`: Start production server
- `pnpm lint`: Run ESLint
- `pnpm type-check`: Run TypeScript type checking
- `pnpm prepare`: Install Husky hooks

### Code Quality Tools

- ESLint with Next.js and TypeScript rules
- Prettier for code formatting
- Husky for pre-commit hooks
- lint-staged for staged file processing

### Testing Strategy

- Unit tests for utility functions
- Component tests with React Testing Library
- Integration tests for API routes
- E2E tests for critical user flows

---

- Integration tests for API routes
- E2E tests for critical user flows

---
