# Development Workflow

> **Rule Chain:**
>
> - For technology stack, see [technology-stack.mdc]
> - For architecture and structure, see [architecture.mdc]
> - For code conventions, see [code-style.mdc]
> - For UI/UX rules, see [design-system.mdc]
> - For i18n, see [internationalization.mdc]
> - For custom hooks, see [hooks.mdc]
> - For commit standards, see [committing.mdc]

## Environment Setup

- Node.js 18+ required
- pnpm package manager
- Supabase project configured
- Environment variables set up properly

## Before Starting

1. Ensure all dependencies are installed: `pnpm install`
2. Set up environment variables
3. Start the development server: `pnpm dev`

## During Development

1. Follow TypeScript strict mode ([code-style.mdc])
2. Use proper ESLint and Prettier configuration
3. Test changes in multiple browsers
4. Check for accessibility issues ([design-system.mdc])
5. Verify internationalization works ([internationalization.mdc])

## Before Committing

1. Run type checking: `pnpm type-check`
2. Run linting: `pnpm lint`
3. Ensure all tests pass
4. Check bundle size impact
5. Verify responsive design ([design-system.mdc])

## Best Practices

- Run ESLint and Prettier before committing
- Use Husky pre-commit hooks for automated checks
- Follow the established linting rules ([code-style.mdc])
- Write meaningful commit messages ([committing.mdc])
- Use Next.js Image component for optimized images
- Implement proper code splitting with dynamic imports
- Use React.memo for expensive components when needed
- Optimize bundle size with proper tree shaking
- Never expose sensitive data in client-side code
- Use proper authentication with Supabase Auth
- Validate all user inputs with Zod
- Follow OWASP security guidelines
- Use React Query for server state ([hooks.mdc])
- Use React state for local component state
- Use React Context sparingly and only for truly global state
- Prefer composition over prop drilling
- Implement proper error boundaries
- Use try-catch blocks for async operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging
- Use semantic HTML elements ([design-system.mdc])
- Implement proper ARIA attributes ([design-system.mdc])
- Ensure keyboard navigation works
- Test with screen readers
- Use proper color contrast ratios ([design-system.mdc])
- Use Next.js metadata API
- Implement proper meta tags
- Use semantic HTML structure
- Optimize for Core Web Vitals
- Use TanStack React Query for server state management ([hooks.mdc])
- Implement proper error handling and loading states ([design-system.mdc])
- Use Supabase client for database operations
- Follow RESTful API conventions for custom endpoints
- Use React Hook Form for form management ([code-style.mdc])
- Implement Zod schemas for validation ([code-style.mdc])
- Provide proper error messages and accessibility ([design-system.mdc])
- Use proper form submission patterns
- Use i18next for all user-facing text ([internationalization.mdc])
- Support multiple languages (en, de, uk)
- Use translation keys in the format: `namespace:key`
- Implement proper language detection and switching ([internationalization.mdc])

## Development Tools

- `pnpm dev`: Start development server with Turbopack
- `pnpm build`: Build for production
- `pnpm start`: Start production server
- `pnpm lint`: Run ESLint
- `pnpm type-check`: Run TypeScript type checking
- `pnpm prepare`: Install Husky hooks

## Testing Strategy

- Unit tests for utility functions
- Component tests with React Testing Library
- Integration tests for API routes
- E2E tests for critical user flows

---

**For all technology, structure, code, UI, i18n, and commit rules, see the referenced rule files.**

- Integration tests for API routes
- E2E tests for critical user flows

---
