# Custom Hooks

> **Rule Chain:**
>
> - For code conventions, see [code-style.mdc]
> - For file/folder structure, see [architecture.mdc]

## Available Hooks

- `useLogout`: Handles user logout with Supabase authentication
- `useApiQuery`: Wrapper around TanStack Query for API data fetching
- `useApiMutation`: Wrapper around TanStack Mutation for API mutations
- `useToast`: Toast notification system for user feedback

## Usage Patterns

- Always use the `use` prefix for custom hooks
- Implement proper TypeScript types for all parameters and return values
- Include loading states and error handling where appropriate
- Follow the established patterns from existing hooks
- Use camelCase for hook names
- Use descriptive names that indicate the hook's purpose
- Group related functionality in a single hook when appropriate

## Error Handling

- Always provide error states in hooks that make API calls
- Use consistent error types across the application
- Provide meaningful error messages for debugging

## State Management

- Use local state for hook-specific data
- Leverage React Query for server state
- Avoid prop drilling by using hooks for shared state

## Performance Considerations

- Use useMemo and useCallback when appropriate
- Avoid unnecessary re-renders
- Implement proper cleanup in useEffect hooks
- Use React Query's built-in caching mechanisms

## Testing Hooks

- Test hooks in isolation using React Testing Library
- Mock external dependencies appropriately
- Test error states and loading states
- Verify cleanup functions are called

---

**For all code and structure rules, see the referenced rule files.**

- Test hooks in isolation using React Testing Library
- Mock external dependencies appropriately
- Test error states and loading states
- Verify cleanup functions are called
