# Internationalization (i18n) Rules

> **Rule Chain:**
>
> - For file/folder structure, see [architecture.mdc]
> - For code conventions, see [code-style.mdc]
> - For i18n testing and workflow, see [development-workflow.mdc]

## Overview

This project uses Next.js 15's built-in internationalization with server-side translations and locale-aware routing. All translations are loaded server-side for better performance, SEO, and type safety.

## Translation File Organization

- Use domain-based organization: one file per feature/domain per language
- Keep structure consistent across all languages
- Add new domain files to all language directories simultaneously

## Locale Routing Structure

- Use `[lang]` dynamic route in `src/app/`
- Each locale has its own URL (e.g., `/en/profile`, `/de/login`)
- Use middleware for automatic locale detection and routing

## Implementation Patterns

- Always await `params` in Next.js 15 pages
- Server components load translations via `getDictionary(lang)`
- Client components receive translations as props
- Use descriptive, hierarchical translation keys (e.g., `auth.login.title`)
- Use TypeScript interfaces for translation dictionaries

## Best Practices

- Group related translations in separate files by domain
- Use camelCase for translation keys
- Test all supported locales when adding new features
- Use proper error boundaries for locale-specific errors
- Each locale must have proper meta tags and semantic HTML

---

**For all structure, code, and workflow rules, see the referenced rule files.**

globs:
alwaysApply: false

---
