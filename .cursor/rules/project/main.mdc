---
description: Main instruction file with explanation of all modules and code principles
globs:
alwaysApply: true
---

# Picki AI Project Rules

## Overview

This is a Next.js 15 application built with TypeScript, React 19, Tailwind CSS, and Supabase. The project uses modern development practices including ESLint, Prettier, and Husky for code quality. The application features Next.js 15's built-in internationalization with server-side translations and locale-aware routing.

## Project Structure

The project rules are organized into focused instruction files for better readability and usage:

### 📋 [Technology Stack](./technology-stack.mdc)

- Core technologies and dependencies
- Version information and package details
- Development tools and configurations

### 🎨 [Code Style & Conventions](./code-style.mdc)

- TypeScript configuration and best practices
- React component patterns and "use client" directive
- **MANDATORY**: Component folder structure with index.tsx and index.module.scss
- Styling guidelines with Tailwind CSS and SCSS modules
- Common code patterns and templates

### 🏗️ [Project Architecture](./architecture.mdc)

- File organization and directory structure
- **MANDATORY**: Component folder organization with index.tsx structure
- Page descriptions and component architecture
- State management patterns
- Authentication and API structure

### 🌍 [Internationalization](./internationalization.mdc)

- Next.js 15 i18n implementation with locale routing
- Server-side translation loading and usage patterns
- Domain-based translation file organization
- Language switching and locale detection

### 🪝 [Custom Hooks](./hooks.mdc)

- Available custom hooks documentation
- Hook development guidelines
- Usage examples and best practices
- Testing and performance considerations

### ⚙️ [Development Workflow](./development-workflow.mdc)

- Environment setup and development process
- Code quality and testing strategies
- Security and performance best practices
- Available scripts and tools

### 📝 [Committing](./committing.mdc)

- Commit message standards and best practices
- Pre-commit hook requirements and error handling
- Version control workflow guidelines
- Clean commit history maintenance

### 🎨 [Design System](./design-system.mdc)

- **MANDATORY**: Design system documentation and guidelines
- Color palette, typography, and layout patterns
- Component design patterns and interactive elements
- Accessibility guidelines and responsive design principles
- Implementation patterns and best practices
- **REQUIRED**: Follow before creating or updating any frontend functionality

### 🚀 [Cursor Quick Reference](./cursor-quick-reference.mdc)

- **MANDATORY**: Component creation workflow and folder structure
- Page and component templates for rapid development
- Common class combinations and implementation patterns
- Troubleshooting guides and solutions
- Design principles checklist

## Quick Start

1. **MANDATORY**: Review the [Design System](./design-system.mdc) before any frontend work
2. Review the [Technology Stack](./technology-stack.mdc) for dependencies
3. Follow [Code Style & Conventions](./code-style.mdc) for development
4. Understand [Project Architecture](./architecture.mdc) for file organization
5. Learn [Internationalization](./internationalization.mdc) patterns for i18n
6. Use [Custom Hooks](./hooks.mdc) for common functionality
7. Follow [Development Workflow](./development-workflow.mdc) for best practices
8. Adhere to [Committing](./committing.mdc) standards for version control

## Key Features

### Next.js 15 i18n Implementation

- **Locale Routing**: `/{locale}/{page}` URL structure (e.g., `/en/profile`, `/de/login`)
- **Server-Side Translations**: All translations loaded server-side for better performance
- **Automatic Detection**: Browser language detection with fallback to English
- **SEO Optimized**: Each locale has its own URL for better search engine indexing
- **Type Safety**: Full TypeScript support for translation dictionaries

### Translation Structure

```
src/messages/
├── en/                    # English translations
│   ├── common.json       # Shared UI elements
│   ├── home.json         # Home page content
│   ├── navigation.json   # Navigation labels
│   ├── auth.json         # Authentication forms
│   ├── profile.json      # Profile page content
│   ├── errors.json       # Error messages
│   ├── start.json        # Start page content
│   ├── recommend.json    # Recommendation interface
│   └── results.json      # Results display
├── de/                    # German translations (same structure)
└── uk/                    # Ukrainian translations (same structure)
```

## Component Creation Approach

### **MANDATORY COMPONENT STRUCTURE**

All new components must follow this structure:

1. **Component Folder**: Each component must have its own folder named after the component (PascalCase)
2. **Implementation File**: Component code goes in `index.tsx` within the component folder
3. **Styles File**: Component-specific styles go in `index.module.scss` (if needed)
4. **Component Naming**: Component name in code must match folder name

**Example Structure:**

```
src/components/
  AuthForm/
    index.tsx              # const AuthForm = () => {}
    index.module.scss      # Component styles (optional)
  Navigation/
    index.tsx              # const Navigation = () => {}
    index.module.scss      # Component styles (optional)
  Button/
    index.tsx              # const Button = () => {}
    index.module.scss      # Component styles (optional)
```

**Import Pattern:**

```typescript
// Import from component folder
import { AuthForm } from '@/components/AuthForm';
import { Navigation } from '@/components/Navigation';
import { Button } from '@/components/Button';
```

## Frontend Development Requirements

### **MANDATORY DESIGN SYSTEM COMPLIANCE**

Before creating or updating any frontend functionality, you **MUST**:

1. **Review Design Documentation**: Read and understand the [Design System](./design-system.mdc) documentation
2. **Follow Color Palette**: Use the established gray-900/gray-800 dark theme with blue/purple accents
3. **Apply Typography System**: Use proper font hierarchy and spacing (8px grid system)
4. **Implement Layout Patterns**: Follow the established card and container patterns
5. **Ensure Accessibility**: Implement proper focus states, ARIA labels, and contrast ratios
6. **Test Responsiveness**: Ensure mobile-first responsive design
7. **Use Component Patterns**: Follow established form field, button, and card patterns
8. **Apply Animations**: Use consistent transition durations (200-300ms)

### Design System Enforcement

- **Color Usage**: Only use colors from the established palette (gray-900, gray-800, blue-600, purple-600, etc.)
- **Typography**: Follow the typography hierarchy (text-2xl for titles, text-sm for labels, etc.)
- **Spacing**: Use the 8px grid system (space-y-2, space-y-4, space-y-6, etc.)
- **Components**: Use established patterns for forms, buttons, cards, and interactive elements
- **Accessibility**: Implement proper semantic HTML, focus management, and ARIA attributes
- **Performance**: Optimize for Core Web Vitals and implement proper loading states

## Notes

- This project uses modern React patterns and Next.js 15 features
- **Next.js 15 Params**: Always await `params` before destructuring in Next.js 15
- **Server-Side i18n**: All translations are loaded server-side for better performance
- **Locale Routing**: Use Next.js built-in locale routing for better SEO and performance
- **Design System**: **MANDATORY** - Follow the design system for all frontend work
- Maintain consistency with the existing codebase
- Follow the established patterns for new features
- Keep dependencies up to date and secure
- Test all supported locales when adding new features
- Keep dependencies up to date and secure
- Test all supported locales when adding new features
